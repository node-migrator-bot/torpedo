#!/usr/bin/env node

var torpedo = require('..');
var bundler = require('../lib/bundler');
var program = require('commander');
var mkdirp = require('mkdirp');
var colors = require('colors');
var growl = require('growl');
var http = require('http');
var up = require('up');

require('date-utils');
var __slice = [].slice;

var images = {
  info: __dirname + '/../images/ok.png',
  error: __dirname + '/../images/error.png'
};

colors.setTheme({
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});

program.version(torpedo.version, '-v, --version').usage('[options] <command>');

program.command('new <name>').description('create a new project with the specified name').action(function(name) {
  mkdirp(name, function(err) {
    if (err) error(err)
    else info('new project created', true);
  });
});

program.command('build <file>').description('create a bundle from every required JS file').action(function(file) {
  var out = 'public/js/torpedo.js';
  info('Bulding ...')
  bundler.bundle(file, out, function() {
    info('Build done.', true);
  });
});

program.command('watch [--server]').description('watch for changes and rebuild when needed').action(function() {

});

program.parse(process.argv);

function info(msg, notify) {
  var date = new Date().toFormat('HH24:MI:SS');
  console.log(date.data, 'info'.info + ':', msg);
  if (notify) {
    growl(msg, {
      title: 'Torpedo',
      image: images.info
    });
  }
};

function error(msg) {
  console.error('error'.error + ':', msg);
  process.exit(1);
};

if (!program.args.length) {
  console.log(program.helpInformation());
};

function image(name) {
  return __dirname + '/../images/' + name + '.png';
};

/*
console.log('starting cluster with %d workers on port %d', 1, program.port);
console.log('ctrl + r to load new code'.grey, process.pid);

var file = program.args[0];
if ('/' != file[0]) file = process.cwd() + '/' + file;

var httpServer = http.Server().listen(program.port);
var srv = up(httpServer, file);
*/
